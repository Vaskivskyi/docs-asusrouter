import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,a as n,b as o,d as i,e as l,w as a,r as d,o as u}from"./app-C6ozGgjR.js";const c={};function f(p,e){const t=d("RouteLink");return u(),s("div",null,[e[6]||(e[6]=n('<p><code>asusrouter.config</code></p><h2 id="module-info" tabindex="-1"><a class="header-anchor" href="#module-info"><span>Module info</span></a></h2><p>This module provides configuration management for the AsusRouter library. These configurations are used across the library to control various aspects of its behavior. The main idea is to provide users a possibility to control some aspects of the library&#39;s operation through a centralized configuration system.</p><hr><h2 id="exposed-api" tabindex="-1"><a class="header-anchor" href="#exposed-api"><span>Exposed API</span></a></h2><ul><li><p><strong>Enums</strong></p><ul><li><code>ARConfigKeyBase</code>: Base enum for configuration keys to inherit from.</li><li><code>ARConfigKey</code>: Enum of configuration keys.</li></ul></li><li><p><strong>Defaults</strong></p><ul><li><code>CONFIG_DEFAULT_BOOL</code>: Default boolean configuration value.</li><li><code>CONFIG_DEFAULT_INT</code>: Default integer configuration value.</li><li><code>CONFIG_DEFAULT_ALREADY_NOTIFIED</code>: Default boolean value for already notified flags.</li><li><code>CONFIG_DEFAULT</code>: Default values for each configuration key.</li><li><code>TYPES_DEFAULT</code>: Default type converters for each key.</li></ul></li><li><p><strong>Functions</strong></p><ul><li><code>safe_bool_config(value)</code>: Converts a value to boolean, using a safe default.</li><li><code>safe_int_config(value)</code>: Converts a value to integer, using a safe default.</li></ul></li><li><p><strong>Classes</strong></p><ul><li><p><code>ARConfigBase</code>: Base class for thread-safe configuration managers to inherit from.</p><ul><li><code>set(key, value)</code>: Set a configuration option.</li><li><code>get(key)</code>: Get a configuration option.</li><li><code>keys()</code>: List all configuration keys.</li><li><code>list()</code>: List all configuration options.</li><li><code>reset()</code>: Reset all options to defaults.</li><li><code>register_type(key, converter)</code>: Register a custom type converter.</li><li><code>types</code>: Property exposing the type converters.</li><li><code>__contains__(key)</code>: Standard function to support <code>key in config</code> checks.</li></ul></li><li><p><code>ARGlobalConfig</code>: Global AsusRouter configuration manager.</p></li></ul></li><li><p><strong>Instances</strong></p><ul><li><code>ARConfig</code>: Singleton instance of <code>ARGlobalConfig</code> for global use.</li></ul></li></ul><hr><h2 id="arconfigkey" tabindex="-1"><a class="header-anchor" href="#arconfigkey"><span><code>ARConfigKey</code></span></a></h2><h3 id="debug-payload" tabindex="-1"><a class="header-anchor" href="#debug-payload"><span>Debug Payload</span></a></h3>',9)),o("ul",null,[o("li",null,[e[3]||(e[3]=o("p",null,[o("code",null,"ARConfigKey.DEBUG_PAYLOAD"),i(" (default "),o("code",null,"ARSecurityLevel.DEFAULT"),i(")")],-1)),o("p",null,[e[1]||(e[1]=i("Controls which data in included in the debug logging. Refer to ")),l(t,{to:"/library/tools/security.html#arsecuritylevel"},{default:a(()=>e[0]||(e[0]=[o("code",null,"ARSecurityLevel",-1)])),_:1}),e[2]||(e[2]=i(" for the available security levels."))])])]),e[7]||(e[7]=n('<hr><h3 id="optimistic-data" tabindex="-1"><a class="header-anchor" href="#optimistic-data"><span>Optimistic Data</span></a></h3><ul><li><code>ARConfigKey.OPTIMISTIC_DATA</code> (default <code>false</code>)</li></ul><hr><h3 id="optimistic-temperature" tabindex="-1"><a class="header-anchor" href="#optimistic-temperature"><span>Optimistic Temperature</span></a></h3><ul><li><p><code>ARConfigKey.OPTIMISTIC_TEMPERATURE</code> (default <code>false</code>)</p><p>Enable automated temperature adjustment</p></li><li><p><code>ARConfigKey.NOTIFIED_OPTIMISTIC_TEMPERATURE</code> (default <code>false</code>)</p><p>Flag of whether user was already notified about the automated temperature adjustment</p></li></ul>',6)),o("p",null,[l(t,{to:"/library/modules/endpoint/temperature.html"},{default:a(()=>e[4]||(e[4]=[i("Details in the Temperature module")])),_:1})]),e[8]||(e[8]=o("hr",null,null,-1)),e[9]||(e[9]=o("h3",{id:"robust-boottime",tabindex:"-1"},[o("a",{class:"header-anchor",href:"#robust-boottime"},[o("span",null,"Robust Boottime")])],-1)),e[10]||(e[10]=o("ul",null,[o("li",null,[o("p",null,[o("code",null,"ARConfigKey.ROBUST_BOOTTIME"),i(" (default "),o("code",null,"false"),i(")")]),o("p",null,"Enable robust boot time calculation")])],-1)),o("p",null,[l(t,{to:"/library/modules/endpoint/devicemap.html"},{default:a(()=>e[5]||(e[5]=[i("Details in the Devicemap module")])),_:1})])])}const h=r(c,[["render",f]]),y=JSON.parse('{"path":"/library/config.html","title":"Configuration","lang":"en-US","frontmatter":{"title":"Configuration"},"git":{"createdTime":1757648996000,"updatedTime":1757648996000,"contributors":[{"name":"Yevhenii Vaskivskyi","username":"","email":"yevhenii@vaskivskyi.com","commits":1}]},"readingTime":{"minutes":0.93,"words":279},"filePathRelative":"library/config.md","localizedDate":"September 12, 2025"}');export{h as comp,y as data};
