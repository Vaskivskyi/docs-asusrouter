import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,b as t,a as r,d as o,e as i,w as n,r as s,o as u}from"./app-C6ozGgjR.js";const p={},m={class:"hint-container warning"};function c(f,e){const a=s("RouteLink");return u(),d("div",null,[e[19]||(e[19]=t("p",null,[t("code",null,"asusrouter.modules.endpoint.temperature")],-1)),e[20]||(e[20]=t("h2",{id:"module-info",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#module-info"},[t("span",null,"Module info")])],-1)),e[21]||(e[21]=t("p",null,[o("This module provides read and process methods for the "),t("a",{href:"#"},"temperature endpoint"),o(".")],-1)),t("div",m,[e[5]||(e[5]=t("p",{class:"hint-container-title"},"Warning",-1)),t("p",null,[e[1]||(e[1]=o("This module can perform additional automated data corrections if set via the ")),i(a,{to:"/library/config.html"},{default:n(()=>e[0]||(e[0]=[t("code",null,"ARConfig",-1)])),_:1}),e[2]||(e[2]=o(". Refer to the ")),e[3]||(e[3]=t("a",{href:"#read"},"read()",-1)),e[4]||(e[4]=o(" description."))])]),e[22]||(e[22]=r('<div class="hint-container tip"><p class="hint-container-title">Tips</p><p>This is an internal module. This means it is optimised for internal use rather for the direct user interaction.</p></div><hr><h2 id="exposed-api" tabindex="-1"><a class="header-anchor" href="#exposed-api"><span>Exposed API</span></a></h2><ul><li><p><strong>Defaults</strong></p><ul><li><code>EXPECTED_DECIMAL_PLACES</code>: Expected decimal places for temperature values (<code>2</code>).</li><li><code>EXPECTED_TEMPERATURE_MIN</code>: Minimum expected temperature (<code>10.0</code>, expected to be always in Celsius).</li><li><code>EXPECTED_TEMPERATURE_MAX</code>: Maximum expected temperature (<code>150.0</code>, expected to be always in Celsius).</li><li><code>MAX_SCALE_COUNT</code>: Maximum number of scaling steps to apply when correcting temperature values (<code>5</code>).</li></ul></li><li><p><strong>Functions</strong></p><ul><li><code>read(content)</code>: Read a raw string loaded from the temperature endpoint into a standard data dictionary.</li><li><code>process(data)</code>: Process the data into a standardized <code>AsusData</code>-compliant format.</li><li><code>_scale_temperature(temperature, range_min, range_max, max_scale_count)</code>: Scale the temperature value to a specific range.</li></ul></li></ul><hr><h2 id="read" tabindex="-1"><a class="header-anchor" href="#read"><span><code>read()</code></span></a></h2><p>Process the raw data string from the temperature endpoint into a standard data dictionary.</p>',7)),t("p",null,[e[7]||(e[7]=o("If the ")),i(a,{to:"/library/config.html"},{default:n(()=>e[6]||(e[6]=[t("code",null,"ARConfig",-1),o(" option")])),_:1}),e[8]||(e[8]=o(" is set to ")),e[9]||(e[9]=t("code",null,"true",-1)),e[10]||(e[10]=o(" via ")),e[11]||(e[11]=t("code",null,"ARConfigKey.OPTIMISTIC_TEMPERATURE",-1)),e[12]||(e[12]=o(", the function will attempt to correct any out-of-range temperature values using the ")),e[13]||(e[13]=t("code",null,"_scale_temperature",-1)),e[14]||(e[14]=o(" function. In this case, user will be notified ONCE with a log warning (except if the ")),e[15]||(e[15]=t("code",null,"ARConfigKey.NOTIFIED_OPTIMISTIC_TEMPERATURE",-1)),e[16]||(e[16]=o(" is set to ")),e[17]||(e[17]=t("code",null,"true",-1)),e[18]||(e[18]=o(" in advance by the user)."))]),e[23]||(e[23]=r('<ul><li><p><strong>Arguments</strong></p><ul><li><code>content: str</code>: The raw data string from the temperature endpoint.</li></ul></li><li><p><strong>Returns</strong></p><ul><li><code>dict[str, float | None]</code>: The processed temperature data.</li></ul></li></ul><h2 id="process" tabindex="-1"><a class="header-anchor" href="#process"><span><code>process()</code></span></a></h2><p>Convert temperature data in an <code>AsusData</code>-compliant format.</p><h2 id="scale-temperature" tabindex="-1"><a class="header-anchor" href="#scale-temperature"><span><code>_scale_temperature()</code></span></a></h2><p>If any of the temperature values in the provided dictionary fall outside the expected range, they are scaled for 1 order of magnitude up or down to fit within the range. Only the maximum of <code>max_scale_count</code> scaling steps is applied.</p><ul><li><p><strong>Arguments</strong></p><ul><li><code>temperature: dict[str, float | None]</code>: The temperature data to scale.</li><li><code>range_min: float</code>: The minimum value of the target range. Default is <code>EXPECTED_TEMPERATURE_MIN</code>.</li><li><code>range_max: float</code>: The maximum value of the target range. Default is <code>EXPECTED_TEMPERATURE_MAX</code>.</li><li><code>max_scale_count: int</code>: The maximum number of scaling steps to apply. Default is <code>MAX_SCALE_COUNT</code>.</li></ul></li><li><p><strong>Returns</strong></p><ul><li><code>dict[str, float | None]</code>: The scaled temperature data.</li></ul></li></ul>',6))])}const T=l(p,[["render",c]]),h=JSON.parse('{"path":"/library/modules/endpoint/temperature.html","title":"Temperature","lang":"en-US","frontmatter":{"title":"Temperature"},"git":{"createdTime":1757648996000,"updatedTime":1757648996000,"contributors":[{"name":"Yevhenii Vaskivskyi","username":"","email":"yevhenii@vaskivskyi.com","commits":1}]},"readingTime":{"minutes":1.16,"words":348},"filePathRelative":"library/modules/endpoint/temperature.md","localizedDate":"September 12, 2025"}');export{T as comp,h as data};
